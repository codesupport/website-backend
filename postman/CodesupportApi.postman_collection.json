{
	"info": {
		"_postman_id": "e5cc4ea2-afe5-4d5a-9df4-f0fe1aee75d4",
		"name": "CodesupportApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Article",
			"item": [
				{
					"name": "CreateArticle_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.articleCode).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdOn).to.not.eql(2);",
									"    pm.expect(response.article.updatedBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.updatedOn).to.not.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of the HTTP protocol.\",\n  \"description\": \"Description of the HTTP Protocol\",\n  \"tags\": [\n\t\t  \"HTTP\",\n\t    \"Protocol\",\n\t    \"Website\"\n  ],\n  \"title\": \"HTTP Protocol\",\n  \"articleCode\": \"abcdefgh\",\n  \"createdBy\": {\n      \"id\": 2\n  },\n  \"createdOn\": 1,\n  \"updatedBy\": {\n      \"id\": 2\n  },\n  \"updatedOn\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticle2_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of making websites.\",\n  \"description\": \"Description for making websitesl\",\n  \"tags\": [\n    \t\"HTTP\",\n\t    \"Website\"\n  ],\n  \"title\": \"Website Development\",\n  \"visible\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticle3_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('PREVIOUS_ARTICLE_ID', pm.response.json().response[0].id);",
									"pm.environment.set('LAST_ARTICLE_UPDATE_DATE', pm.response.json().response[0].article.updatedOn);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.articleCode).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdOn).to.not.eql(2);",
									"    pm.expect(response.article.updatedBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.updatedOn).to.not.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of the AMQP protocol.\",\n  \"description\": \"Description of the AMQP Protocol\",\n  \"tags\": [\n\t\t\"AMQP\",\n    \"Protocol\",\n    \"Website\",\n    \"Messaging\"\n  ],\n  \"title\": \"AMQP Protocol\",\n  \"visible\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticle_NotPublished",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const articleId = pm.environment.get(\"PREVIOUS_ARTICLE_ID\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.eql(articleId);",
									"    pm.expect(response.published).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{PREVIOUS_ARTICLE_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{PREVIOUS_ARTICLE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PublishArticle_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.action).to.eql(\"Publish article\");",
									"    pm.expect(response.affectedEntities).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{PREVIOUS_ARTICLE_ID}},\n  \"article\": {\n      \"updatedOn\": {{LAST_ARTICLE_UPDATE_DATE}}\n  },\n  \"published\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/publish",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticle_Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const articleId = pm.environment.get(\"PREVIOUS_ARTICLE_ID\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.eql(articleId);",
									"    pm.expect(response.published).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{PREVIOUS_ARTICLE_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{PREVIOUS_ARTICLE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles_All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response;",
									"    pm.expect(response.length).to.greaterThan(2);",
									"    pm.expect(hasUnpublishedArticle(response)).to.be.true;",
									"});",
									"",
									"function hasUnpublishedArticle(articleArray) {",
									"    let hasUnpublished = false;",
									"    ",
									"    for (let i = 0; !hasUnpublished && i < articleArray.length; i++) {",
									"        console.log(articleArray[i].article.title + \", published: \" + articleArray[i].published);",
									"        hasUnpublished = !articleArray[i].published;",
									"    }",
									"",
									"    return hasUnpublished;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles_PublishedOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response;",
									"    pm.expect(response.length).to.greaterThan(0);",
									"    pm.expect(hasUnpublishedArticle(response)).to.be.false;",
									"});",
									"",
									"function hasUnpublishedArticle(articleArray) {",
									"    let hasUnpublished = false;",
									"    ",
									"    for (let i = 0; !hasUnpublished && i < articleArray.length; i++) {",
									"        console.log(articleArray[i].article.title + \", published: \" + articleArray[i].published);",
									"        hasUnpublished = !articleArray[i].published;",
									"    }",
									"",
									"    return hasUnpublished;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles?publishedonly=true",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							],
							"query": [
								{
									"key": "publishedonly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "AuthenticateUser_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    let expected = [",
									"        \"Invalid user credentials\"",
									"    ];",
									"",
									"    pm.expect(jsonData.message).to.deep.eql(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"boooop@cs.dev\",\n\t\"password\": \"beeeeeeeeeeep\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"Iffy\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BLAHBLAHLBAH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"Iffy\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackend = pm.environment.get(\"codesupportBackend\");",
									"",
									"pm.sendRequest({",
									"    url: codesupportBackend + '/authenticate',",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({\"email\":\"iffy@cs.dev\",\"password\":\"supersecretpassword\"})",
									"    }",
									"}, function (err, res) {",
									"    const token = res.json().response[0].token;",
									"    pm.environment.set(\"JWT_TOKEN\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateDiscord_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackend = pm.environment.get(\"codesupportBackend\");",
									"",
									"pm.sendRequest({",
									"    url: codesupportBackend + '/authenticate',",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({\"email\":\"iffy@cs.dev\",\"password\":\"supersecretpassword\"})",
									"    }",
									"}, function (err, res) {",
									"    const token = res.json().response[0].token;",
									"    pm.environment.set(\"JWT_TOKEN\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/DISABLEdiscord?code=abc",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"DISABLEdiscord"
							],
							"query": [
								{
									"key": "code",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "CreateImage_InvalidType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"file: Invalid filetype, only accept png, jpg, gif, svg\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/sometextfile.txt"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateImage_InvalidSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(413)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"File is too large, max size is 1000 bytes\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/largeimage.gif"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateImage_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('LAST_IMAGE_UPLOAD_NAME', pm.response.json().response[0].name);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.id).to.not.be.null;",
									"    pm.expect(firstResult.contentType.type).to.eq(\"image/gif\");",
									"    pm.expect(firstResult.contentType.extension).to.eq(\"gif\");",
									"    pm.expect(firstResult.fileSizeB).to.eql(810);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/tinyimage.gif"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetImage_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    console.log(pm.response.size());",
									"    pm.expect(pm.response.size().body).to.eql(810);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images/{{LAST_IMAGE_UPLOAD_NAME}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images",
								"{{LAST_IMAGE_UPLOAD_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetImage_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Resource with the given ID was not found\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images/abcdefg123456.gif",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images",
								"abcdefg123456.gif"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Showcase",
			"item": [
				{
					"name": "FindAllShowcases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByUserId_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 2)).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userId) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.id == userId;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?userid=2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "userid",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 'lambo')).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userName) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.alias.toLowerCase() == userName;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?alias=lambo",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "alias",
									"value": "lambo"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "FindAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindAllUserProfiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[1].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"iffy\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=ifFy",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "ifFy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=someusername",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "someusername"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"code\", \"label\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      let result = res.json();",
									"      let token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Resource with the given ID was not found\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      let result = res.json();",
									"      let token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"joeshmo\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateAlias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that alias.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"ifFY\",\n\t\"email\": \"iffy2@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that email.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"iffies\",\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}