{
	"info": {
		"_postman_id": "e5cc4ea2-afe5-4d5a-9df4-f0fe1aee75d4",
		"name": "CodesupportApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Article",
			"item": [
				{
					"name": "CreateArticle_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3e3544f-faba-4ab3-a637-8e479f0f59e6",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f24c0187-da52-4179-8ec0-0103465be044",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.articleCode).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdOn).to.not.eql(2);",
									"    pm.expect(response.article.updatedBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.updatedOn).to.not.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of the HTTP protocol.\",\n  \"description\": \"Description of the HTTP Protocol\",\n  \"tags\": [\n\t\t  \"HTTP\",\n\t    \"Protocol\",\n\t    \"Website\"\n  ],\n  \"title\": \"HTTP Protocol\",\n  \"articleCode\": \"abcdefgh\",\n  \"createdBy\": {\n      \"id\": 2\n  },\n  \"createdOn\": 1,\n  \"updatedBy\": {\n      \"id\": 2\n  },\n  \"updatedOn\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticle2_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e8e031c9-f7e3-45b9-ba70-7ba40f002f08",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fca6d423-bb14-401e-864f-ea5bf107af28",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of making websites.\",\n  \"description\": \"Description for making websitesl\",\n  \"tags\": [\n    \t\"HTTP\",\n\t    \"Website\"\n  ],\n  \"title\": \"Website Development\",\n  \"visible\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticle3_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42b2229a-a415-4514-a799-b78bffd4a619",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e27dbbff-f94e-40bb-b4e9-ddf44eb9a6c3",
								"exec": [
									"pm.environment.set('PREVIOUS_ARTICLE_ID', pm.response.json().response[0].id);",
									"pm.environment.set('LAST_ARTICLE_UPDATE_DATE', pm.response.json().response[0].article.updatedOn);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.articleCode).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.createdOn).to.not.eql(2);",
									"    pm.expect(response.article.updatedBy.id).to.not.eql('acbdefgh');",
									"    pm.expect(response.article.updatedOn).to.not.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Lots of text to talk about the different aspects of the AMQP protocol.\",\n  \"description\": \"Description of the AMQP Protocol\",\n  \"tags\": [\n\t\t\"AMQP\",\n    \"Protocol\",\n    \"Website\",\n    \"Messaging\"\n  ],\n  \"title\": \"AMQP Protocol\",\n  \"visible\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticle_NotPublished",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "371d10f9-75b2-4e11-81e1-91153bce3219",
								"exec": [
									"const articleId = pm.environment.get(\"PREVIOUS_ARTICLE_ID\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.eql(articleId);",
									"    pm.expect(response.published).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{PREVIOUS_ARTICLE_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{PREVIOUS_ARTICLE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PublishArticle_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d4a4488-6344-4bd7-a9f6-c172b95ca23e",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb21b5d3-b12e-4e85-8974-22a04e316527",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.action).to.eql(\"Publish article\");",
									"    pm.expect(response.affectedEntities).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{PREVIOUS_ARTICLE_ID}},\n  \"article\": {\n      \"updatedOn\": {{LAST_ARTICLE_UPDATE_DATE}}\n  },\n  \"published\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/publish",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticle_Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f932849-4829-40a5-b1af-d12793d72115",
								"exec": [
									"const articleId = pm.environment.get(\"PREVIOUS_ARTICLE_ID\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.eql(articleId);",
									"    pm.expect(response.published).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{PREVIOUS_ARTICLE_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{PREVIOUS_ARTICLE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles_All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad42f2f9-09fb-4237-944d-31b9e827b4a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29c14bab-70df-4b66-813e-5f56adc21458",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response;",
									"    pm.expect(response.length).to.greaterThan(2);",
									"    pm.expect(hasUnpublishedArticle(response)).to.be.true;",
									"});",
									"",
									"function hasUnpublishedArticle(articleArray) {",
									"    let hasUnpublished = false;",
									"    ",
									"    for (let i = 0; !hasUnpublished && i < articleArray.length; i++) {",
									"        console.log(articleArray[i].article.title + \", published: \" + articleArray[i].published);",
									"        hasUnpublished = !articleArray[i].published;",
									"    }",
									"",
									"    return hasUnpublished;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles_PublishedOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcb1cc76-c63c-4dd0-a3f3-aff2f302382b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response;",
									"    pm.expect(response.length).to.greaterThan(0);",
									"    pm.expect(hasUnpublishedArticle(response)).to.be.false;",
									"});",
									"",
									"function hasUnpublishedArticle(articleArray) {",
									"    let hasUnpublished = false;",
									"    ",
									"    for (let i = 0; !hasUnpublished && i < articleArray.length; i++) {",
									"        console.log(articleArray[i].article.title + \", published: \" + articleArray[i].published);",
									"        hasUnpublished = !articleArray[i].published;",
									"    }",
									"",
									"    return hasUnpublished;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles?publishedonly=true",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							],
							"query": [
								{
									"key": "publishedonly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "AuthenticateUser_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "132fbbef-9d1c-4fe4-b4d0-d53cc9752cb5",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    let expected = [",
									"        \"Invalid user credentials\"",
									"    ];",
									"",
									"    pm.expect(jsonData.message).to.deep.eql(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"boooop@cs.dev\",\n\t\"password\": \"beeeeeeeeeeep\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47317284-ee0d-4b50-bcd4-8cd833f262e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"Iffy\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68cf91c8-3321-46ef-bb01-e6373ba08c30",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BLAHBLAHLBAH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b309a1d1-becf-4309-8d05-d8f418092ce3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"Iffy\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46bfb04b-9f77-464e-b7f2-a7da7e026a4e",
								"exec": [
									"const codesupportBackend = pm.environment.get(\"codesupportBackend\");",
									"",
									"pm.sendRequest({",
									"    url: codesupportBackend + '/authenticate',",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({\"email\":\"iffy@cs.dev\",\"password\":\"supersecretpassword\"})",
									"    }",
									"}, function (err, res) {",
									"    const token = res.json().response[0].token;",
									"    pm.environment.set(\"JWT_TOKEN\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateDiscord_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fa7c790-2695-4b99-a1f4-ba782fd809b0",
								"exec": [
									"const codesupportBackend = pm.environment.get(\"codesupportBackend\");",
									"",
									"pm.sendRequest({",
									"    url: codesupportBackend + '/authenticate',",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({\"email\":\"iffy@cs.dev\",\"password\":\"supersecretpassword\"})",
									"    }",
									"}, function (err, res) {",
									"    const token = res.json().response[0].token;",
									"    pm.environment.set(\"JWT_TOKEN\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/DISABLEdiscord?code=abc",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"DISABLEdiscord"
							],
							"query": [
								{
									"key": "code",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Showcase",
			"item": [
				{
					"name": "FindAllShowcases",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dc23978-7598-41fb-b39a-018858a0d67c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByUserId_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac4e0db-e554-4449-a58e-8e34efeb1ca1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 2)).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userId) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.id == userId;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?userid=2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "userid",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbc7951-b47d-4e98-ad1f-e13a72d27b00",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 'lambo')).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userName) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.alias.toLowerCase() == userName;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?alias=lambo",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "alias",
									"value": "lambo"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "FindAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81dfbf2e-7a6f-415b-ba8a-0cfc472ca5d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f46f36b-5377-4bc2-82df-3dad1af6d06b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b47057e6-c599-4035-89c1-dede0931af14",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindAllUserProfiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "115aaccd-56dd-4bfe-93bc-f653f442cf2b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[1].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19b20b93-2295-491e-af3b-a32877219e67",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98398ba3-dc28-4e82-8660-0af7b29487f6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caebcb37-94ec-4284-a021-057c43055138",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"iffy\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=ifFy",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "ifFy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d0b6a58-be57-4c36-9f0b-80ef72388c86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=someusername",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "someusername"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc682292-edc3-4fd3-a4f0-493431e373e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"code\", \"label\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d54b5b28-2ade-4746-868b-d86af24c3c80",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      let result = res.json();",
									"      let token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32db671a-76c4-4e61-aa9d-d57105b6d32c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Resource with the given ID was not found\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45fe5c2f-231d-400d-b5ee-4d520d29ed8c",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      let result = res.json();",
									"      let token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ded573cb-6a73-400c-b9ee-748939f20c4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.user.id).to.not.be.null;",
									"    pm.expect(firstResult.user.alias).to.eq(\"joeshmo\");",
									"    pm.expect(firstResult.token).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a30fd99f-d817-4f13-b20f-591b71dfb887",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65fb5490-c22a-440b-8bcb-8e9c3ae2336f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "77b187c4-5069-4e24-9a7d-051d6456622b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateAlias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f6c2379-ddab-46ec-a480-c9288f618a45",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that alias.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c81e130-326b-4130-8834-3924bcc9bfc3",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"ifFY\",\n\t\"email\": \"iffy2@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05839d37-22ce-4dfe-a7db-698cf04f8985",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that email.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c8e688b-902c-489b-a327-e1250e80cbae",
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const result = res.json();",
									"      const token = result.response[0].token;",
									"      pm.environment.set('JWT_TOKEN', token);",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"iffies\",\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}