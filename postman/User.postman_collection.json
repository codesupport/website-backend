{
	"info": {
		"_postman_id": "e05ca882-3d82-44d1-9980-450f07818c66",
		"name": "User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateUser_Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "487f5b46-526e-45ca-8eb0-256feca4ec0a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"OK\");",
							"});",
							"pm.test(\"Message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.null;",
							"});",
							"pm.test(\"Payload is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.length).to.eq(1);",
							"",
							"    const firstResult = jsonData.response[0];",
							"    pm.expect(firstResult.user.id).to.not.be.null;",
							"    pm.expect(firstResult.user.alias).to.eq(\"atrum\");",
							"    pm.expect(firstResult.token).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"alias\": \"atrum\",\n\t\"email\": \"atrum@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{codesupportBackend}}/api/user/v1/users",
					"host": [
						"{{codesupportBackend}}"
					],
					"path": [
						"api",
						"user",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser_DuplicateAlias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52862a64-0310-41a4-a9b0-d20579be1505",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500)",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
							"});",
							"pm.test(\"Message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const expected = [",
							"        \"User already exists with that alias.\"",
							"    ];",
							"    pm.expect(jsonData.message).to.deep.eq(expected);",
							"});",
							"pm.test(\"Payload is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"alias\": \"ifFY\",\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{codesupportBackend}}/api/user/v1/users",
					"host": [
						"{{codesupportBackend}}"
					],
					"path": [
						"api",
						"user",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser_DuplicateEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbada7bd-347e-4808-9d24-de8bafc389bc",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500)",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
							"});",
							"pm.test(\"Message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const expected = [",
							"        \"User already exists with that email.\"",
							"    ];",
							"    pm.expect(jsonData.message).to.deep.eq(expected);",
							"});",
							"pm.test(\"Payload is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"alias\": \"iffies\",\n\t\"email\": \"if.fy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{codesupportBackend}}/api/user/v1/users",
					"host": [
						"{{codesupportBackend}}"
					],
					"path": [
						"api",
						"user",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetProfile_Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "022a3c1a-aba2-4983-9682-44ede9b0f420",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"OK\");",
							"});",
							"pm.test(\"Message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.null;",
							"});",
							"pm.test(\"Payload is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.length).to.eq(1);",
							"    const entry = jsonData.response[0];",
							"    pm.expect(entry.id).to.eq(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{codesupportBackend}}/api/user/v1/profiles?alias=ifFY",
					"host": [
						"{{codesupportBackend}}"
					],
					"path": [
						"api",
						"user",
						"v1",
						"profiles"
					],
					"query": [
						{
							"key": "alias",
							"value": "ifFY"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}