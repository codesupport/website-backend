{
	"info": {
		"_postman_id": "e5cc4ea2-afe5-4d5a-9df4-f0fe1aee75d4",
		"name": "CodesupportApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Article",
			"item": [
				{
					"name": "CreateArticle_Unauthenticated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticle_Valid_ExtraInfo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'iffy@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('LAST_ARTICLE_ID', pm.response.json().response[0].id);",
									"pm.environment.set('LAST_ARTICLE_UPDATE_DATE', pm.response.json().response[0].updatedOn);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    const currentTime = new Date().getTime();",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.id).to.not.eql(577);",
									"    pm.expect(response.title).to.eql(\"HTTP Protocol\");",
									"    pm.expect(response.revision).to.be.null;",
									"    pm.expect(response.createdBy.id).to.eql(3);",
									"    pm.expect(response.createdOn).to.greaterThan(currentTime - 10000);",
									"    pm.expect(response.createdOn).to.lessThan(currentTime);",
									"    pm.expect(response.updatedBy.id).to.eql(3);",
									"    pm.expect(response.updatedOn).to.greaterThan(currentTime - 10000);",
									"    pm.expect(response.updatedOn).to.lessThan(currentTime);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 577,\n    \"title\": \"HTTP Protocol\",\n    \"revision\": {\n        \"id\": 10\n    },\n    \"createdBy\": {\n        \"id\": 2\n    },\n    \"createdOn\": 1,\n    \"updatedBy\": {\n        \"id\": 2\n    },\n    \"updatedOn\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticleRevision_Valid_ExtraInfo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'iffy@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('LAST_ARTICLE_REVISION_ID', pm.response.json().response[0].id);",
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    const currentTime = new Date().getTime();",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.id).to.not.eql(515);",
									"    pm.expect(response.articleId).to.eql(LAST_ARTICLE_ID)",
									"    pm.expect(response.description).to.not.be.null;",
									"    pm.expect(response.content).to.not.be.null;",
									"    pm.expect(response.createdBy.id).to.eql(3);",
									"    pm.expect(response.createdOn).to.greaterThan(currentTime - 10000);",
									"    pm.expect(response.createdOn).to.lessThan(currentTime);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 515,\n    \"articleId\": {{LAST_ARTICLE_ID}},\n    \"description\": \"Description for Http Protocol\",\n    \"content\": \"Lots of text to talk about the different aspects of the HTTP protocol. [someimage](http://localhost:8082/file/v1/images/SomeImageReference.jpg)\",\n    \"tags\": [\n        \"HTTP\",\n\t    \"Website\"\n    ],\n    \"createdBy\": {\n        \"id\": 21\n    },\n    \"createdOn\": 15\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticleRevision_Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"Resource with the given ID was not found\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"articleId\": 756,\n    \"description\": \"Description for Http Protocol\",\n    \"content\": \"Lots of text to talk about the different aspects of the HTTP protocol.\",\n    \"tags\": [\n        \"HTTP\",\n\t    \"Website\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticleRevision_Unauthenticated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"articleId\": {{LAST_ARTICLE_ID}},\n    \"description\": \"Another revision for unpublished article\",\n    \"content\": \"Created by someone who is not the original author of the article, but is an admin.\",\n    \"tags\": [\n        \"HTTP\",\n\t    \"Website\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticleRevision_Unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"You are not allowed to edit this article\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"articleId\": {{LAST_ARTICLE_ID}},\n    \"description\": \"Another revision for HTTP article\",\n    \"content\": \"Lots of text to talk about the different aspects of the HTTP protocol.\",\n    \"tags\": [\n        \"HTTP\",\n\t    \"Website\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArticleRevision_Authorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'lambo@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('LAST_ARTICLE_REVISION_ID', pm.response.json().response[0].id);",
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    const currentTime = new Date().getTime();",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.articleId).to.eql(LAST_ARTICLE_ID);",
									"    pm.expect(response.description).to.not.be.null;",
									"    pm.expect(response.content).to.not.be.null;",
									"    pm.expect(response.createdBy.id).to.eql(2);",
									"    pm.expect(response.createdOn).to.greaterThan(currentTime - 10000);",
									"    pm.expect(response.createdOn).to.lessThan(currentTime);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"articleId\": {{LAST_ARTICLE_ID}},\n    \"description\": \"Another revision for HTTP article\",\n    \"content\": \"Created by someone who is not the original author of the article, but is an admin.\",\n    \"tags\": [\n        \"HTTP\",\n\t    \"Website\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticleRevision_ById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"const LAST_ARTICLE_REVISION_ID = pm.environment.get('LAST_ARTICLE_REVISION_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    pm.expect(response.id).to.eql(LAST_ARTICLE_REVISION_ID);",
									"    pm.expect(response.articleId).to.eql(LAST_ARTICLE_ID);",
									"    pm.expect(response.description).to.not.be.null;",
									"    pm.expect(response.content).to.not.be.null;",
									"    pm.expect(response.createdBy.id).to.eql(2);",
									"    pm.expect(response.createdOn).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/revisions/{{LAST_ARTICLE_REVISION_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"revisions",
								"{{LAST_ARTICLE_REVISION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticleRevisions_ByArticleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const LAST_ARTICLE_REVISION_ID = pm.environment.get('LAST_ARTICLE_REVISION_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const article = jsonData.response.filter(a => a.id === LAST_ARTICLE_REVISION_ID)[0];",
									"    ",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(article.id).to.eql(LAST_ARTICLE_REVISION_ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{LAST_ARTICLE_ID}}/revisions",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{LAST_ARTICLE_ID}}",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateArticle_Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"id: can not be null\",",
									"        \"updatedOn: can not be null\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Some new title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateArticle_Unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"You are not permitted to perform the requested action on the requested resource.\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{LAST_ARTICLE_ID}},\n    \"title\": \"Some new title\",\n    \"revision\": {\n        \"id\": {{LAST_ARTICLE_REVISION_ID}}\n    },\n    \"updatedOn\": {{LAST_ARTICLE_UPDATE_DATE}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateArticle_Stale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'lambo@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedErrors = [",
									"        \"Resource contains stale data, please re-fetch data and try again.\"",
									"    ].sort();",
									"    pm.expect(jsonData.message.sort()).to.eql(expectedErrors);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{LAST_ARTICLE_ID}},\n    \"title\": \"Some new title\",\n    \"revision\": {\n        \"id\": {{LAST_ARTICLE_REVISION_ID}}\n    },\n    \"updatedOn\": 917\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateArticle_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'lambo@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"const LAST_ARTICLE_REVISION_ID = pm.environment.get('LAST_ARTICLE_REVISION_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    const currentTime = new Date().getTime();",
									"    pm.expect(response.id).to.eql(LAST_ARTICLE_ID);",
									"    pm.expect(response.title).to.eql(\"HTTP Protocol\");",
									"    pm.expect(response.revision.id).to.eql(LAST_ARTICLE_REVISION_ID);",
									"    pm.expect(response.createdBy.id).to.eql(3);",
									"    pm.expect(response.createdOn).to.greaterThan(0);",
									"    pm.expect(response.updatedBy.id).to.eql(2);",
									"    pm.expect(response.updatedOn).to.greaterThan(currentTime - 10000);",
									"    pm.expect(response.updatedOn).to.lessThan(currentTime);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{LAST_ARTICLE_ID}},\n    \"title\": \"Some new title\",\n    \"revision\": {\n        \"id\": {{LAST_ARTICLE_REVISION_ID}}\n    },\n    \"updatedOn\": {{LAST_ARTICLE_UPDATE_DATE}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetArticle_ById_TitleNotChanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const LAST_ARTICLE_ID = pm.environment.get('LAST_ARTICLE_ID');",
									"const LAST_ARTICLE_REVISION_ID = pm.environment.get('LAST_ARTICLE_REVISION_ID');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const response = jsonData.response[0];",
									"    const currentTime = new Date().getTime();",
									"    pm.expect(response.id).to.eql(LAST_ARTICLE_ID);",
									"    pm.expect(response.title).to.eql(\"HTTP Protocol\");",
									"    pm.expect(response.revision.id).to.eql(LAST_ARTICLE_REVISION_ID);",
									"    pm.expect(response.createdBy.id).to.eql(3);",
									"    pm.expect(response.createdOn).to.greaterThan(0);",
									"    pm.expect(response.updatedBy.id).to.eql(2);",
									"    pm.expect(response.updatedOn).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles/{{LAST_ARTICLE_ID}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles",
								"{{LAST_ARTICLE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const publishedArticles = jsonData.response.filter(a => a.revision != null);",
									"    const unpublishedArticles = jsonData.response.filter(a => a.revision == null);",
									"    ",
									"    pm.expect(publishedArticles.length).to.eql(2);",
									"    pm.expect(unpublishedArticles.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllArticles_PublishedOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const publishedArticles = jsonData.response.filter(a => a.revision != null);",
									"    ",
									"    pm.expect(publishedArticles.length).to.eql(jsonData.response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/article/v1/articles?publishedonly=true",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"article",
								"v1",
								"articles"
							],
							"query": [
								{
									"key": "publishedonly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "AuthenticateUser_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    let expected = [",
									"        \"Invalid user credentials\"",
									"    ];",
									"",
									"    pm.expect(jsonData.message).to.deep.eql(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"boooop@cs.dev\",\n\t\"password\": \"beeeeeeeeeeep\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const cookie = pm.response.headers.get('Set-Cookie').split(';')[0];",
									"    const cookieName = cookie.split('=')[0];",
									"    const token = cookie.split('=')[1];",
									"    pm.expect(cookieName).to.eq('AccessToken');",
									"    pm.expect(token.length).to.eq(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken_Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const cookie = pm.response.headers.get('Set-Cookie').split(';')[0];",
									"    const cookieName = cookie.split('=')[0];",
									"    const token = cookie.split('=')[1];",
									"    pm.expect(cookieName).to.eq('AccessToken');",
									"    pm.expect(token.length).to.eq(50);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/refresh",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "AuthenticateDiscord_Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/authenticate/DISABLEdiscord?code=abc",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"authenticate",
								"DISABLEdiscord"
							],
							"query": [
								{
									"key": "code",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "CreateImage_InvalidType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"file: Invalid filetype, only accept png, jpg, gif, svg\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/sometextfile.txt"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateImage_InvalidSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(413)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"File is too large, max size is 1000 bytes\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/largeimage.gif"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateImage_InvalidPayload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"file: Invalid filetype, only accept png, jpg, gif, svg\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateImage_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('LAST_IMAGE_UPLOAD_NAME', pm.response.json().response[0].name);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.id).to.not.be.null;",
									"    pm.expect(firstResult.contentType.type).to.eq(\"image/gif\");",
									"    pm.expect(firstResult.contentType.extension).to.eq(\"gif\");",
									"    pm.expect(firstResult.fileSizeB).to.eql(810);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "./postman/tinyimage.gif"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetImage_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    console.log(pm.response.size());",
									"    pm.expect(pm.response.size().body).to.eql(810);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images/{{LAST_IMAGE_UPLOAD_NAME}}",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images",
								"{{LAST_IMAGE_UPLOAD_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetImage_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Resource with the given ID was not found\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/file/v1/images/abcdefg123456.gif",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"file",
								"v1",
								"images",
								"abcdefg123456.gif"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Showcase",
			"item": [
				{
					"name": "FindAllShowcases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByUserId_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 2)).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userId) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.id == userId;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?userid=2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "userid",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetShowcaseByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    pm.expect(allShowcasesHaveCreatedBy(jsonData.response, 'lambo')).to.be.true;",
									"});",
									"",
									"function allShowcasesHaveCreatedBy(showcases, userName) {",
									"    allByUser = true;",
									"",
									"    for (let i = 0; allByUser && i < showcases.length; i++) {",
									"        allByUser = showcases[i].user.alias.toLowerCase() == userName;",
									"    }",
									"",
									"    return allByUser;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/showcase/v1/showcases?alias=lambo",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"showcase",
								"v1",
								"showcases"
							],
							"query": [
								{
									"key": "alias",
									"value": "lambo"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "FindAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"discordId\", \"discordUsername\", \"avatarLink\", \"disabled\", \"role\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindAllUserProfiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[1].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"lambo\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Valid_Self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"atrum\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/4",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"iffy\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=ifFy",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "ifFy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Valid_Self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0].alias.toLowerCase()).to.eql(\"atrum\");",
									"    const expectedProperties = [\"id\", \"alias\", \"email\", \"discordId\", \"discordUsername\", \"githubUsername\", \"jobTitle\", \"jobCompany\", \"avatarLink\", \"disabled\", \"role\", \"biography\", \"country\", \"userAward\", \"joinDate\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"    pm.expect(jsonData.response[0].email).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=aTrUm",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "aTrUm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserProfileByAlias_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.eql(",
									"        [",
									"            \"Resource with the given ID was not found\"",
									"        ]",
									"    );",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/profiles?alias=someusername",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"profiles"
							],
							"query": [
								{
									"key": "alias",
									"value": "someusername"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.greaterThan(0);",
									"    const expectedProperties = [\"id\", \"code\", \"label\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPermissionsById_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Resource with the given ID was not found\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/permissions/-2",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"permissions",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCurrentUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.id).to.eq(4);",
									"    pm.expect(firstResult.alias.toLowerCase()).to.eq(\"atrum\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{ACCESS_TOKEN_COOKIE}}"
							}
						],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/current",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCurrentUser_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Invalid user access token\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/current",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eq(1);",
									"",
									"    const firstResult = jsonData.response[0];",
									"    pm.expect(firstResult.id).to.not.be.null;",
									"    pm.expect(firstResult.alias).to.eq(\"joeshmo\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UNAUTHORIZED\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql([",
									"        \"Invalid user credentials\"",
									"    ]);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "AccessToken=blahblahblahblah",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"joeshmo\",\n\t\"email\": \"joeshmo@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateAlias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that alias.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"ifFY\",\n\t\"email\": \"iffy2@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser_Invalid_DuplicateEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expected = [",
									"        \"User already exists with that email.\"",
									"    ];",
									"    pm.expect(jsonData.message).to.deep.eq(expected);",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const codesupportBackendUrl = pm.environment.get(\"codesupportBackend\");",
									"",
									"const echoPostRequest = {",
									"  url: codesupportBackendUrl + '/authenticate',",
									"  method: 'POST',",
									"  header: 'Content-Type: application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ email: 'atrum@cs.dev', password: 'supersecretpassword' })",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  if (!err) {",
									"      const cookie = res.headers.get('Set-Cookie');",
									"      if (cookie != null) {",
									"          const cookieValue = cookie.split(';')[0];",
									"          pm.environment.set('ACCESS_TOKEN_COOKIE', cookieValue);",
									"      }",
									"  } else {",
									"      console.log(err);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{ACCESS_TOKEN_COOKIE}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"alias\": \"iffies\",\n\t\"email\": \"iffy@cs.dev\",\n\t\"password\": \"supersecretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{codesupportBackend}}/user/v1/users",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"user",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "GetEndpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Status is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"pm.test(\"Message is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.null;",
									"});",
									"pm.test(\"Payload is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
									"    const expectedProperties = [\"name\", \"version\", \"method\", \"uri\", \"returns\", \"expectsBody\", \"urlParameters\"].sort();",
									"    pm.expect(Object.getOwnPropertyNames(jsonData.response[0]).sort()).to.eql(expectedProperties);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{codesupportBackend}}/service/v1/endpoints",
							"host": [
								"{{codesupportBackend}}"
							],
							"path": [
								"service",
								"v1",
								"endpoints"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}